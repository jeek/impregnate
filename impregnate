#!/usr/bin/env python

import argparse
import png

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Hide one png inside another and/or hide a file.')
    parser.add_argument('-m', '--mainimage', type=str, required=True, help='main image file')
    parser.add_argument('-i', '--secretimage', type=str, required=True, help='image file to hide')
    parser.add_argument('-o', '--outfile', type=str, required=True, help='filename to output to')
    parser.add_argument('-a', '--zipfile', type=str, required=True, help='zip file to attach')
    parser.add_argument('-d', '--debug', action='store_const', const=True, default=False, help='show debug info')
    if parser.parse_args().secretimage != None:
        if parser.parse_args().debug:
            print parser.parse_args()
        (width, height, pixels, meta) = png.Reader(parser.parse_args().mainimage).asRGBA8()
        (width2, height2, pixels2, meta2) = png.Reader(parser.parse_args().secretimage).asRGBA8()
        if width != width2 or height != height2:
            die("Image size mismatch")
        if parser.parse_args().debug:
            print width, height
        final = []
        for i in pixels:
            other = pixels2.next()
            newrow = []
            for j in range(0, len(i)):
                newrow.append(i[j] * 256 + other[j])
            if parser.parse_args().debug:
                print newrow
            final.append(newrow)
        png.from_array(final, mode="RGBA;16").save(parser.parse_args().outfile)
        firstfile = open(parser.parse_args().outfile, "a")
        secondfile = open(parser.parse_args().zipfile, "r")
        firstfile.write(secondfile.read())
        firstfile.close()
        secondfile.close()
